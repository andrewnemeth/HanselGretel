// game.js for Perlenspiel 3.3.x
// The following comment lines are for JSHint. Don't remove them!

/* jshint browser : true, devel : true, esversion : 5, freeze : true */
/* globals PS : true */

// The G variable encapsulates all app constants, variables and functions, public and private.
// It is initialized on file load with an immediately-invoked function expression (IIFE).

const CANDY_REFILL = 1000;
const BREAD_DECAY_RATE = 1.2
const LOSE_TEXT_CHANGE_TIME = 70
const CANDY_SLOW = 5 //# of frames added to move tick
const HUT_START_SPEED = 8

var timeOfLastWin = 0;

var NIGHT_GRID_SIZE = 5;//must be odd
var GRID_DAY_COLOR = PS.COLOR_WHITE; // background color
var GRID_NIGHT_COLOR = PS.COLOR_GRAY_DARK; // background color
var _COLOR_WALL = [55,50,24]; // wall color
var FLOOR_COLOR = PS.COLOR_GRAY; // floor color
var _COLOR_GOLD = PS.COLOR_YELLOW; // gold color
var _COLOR_ACTOR = [91,110,225]; // actor color
var OOB_COLOR = [55,50,24]
var TIMER_COLOR = PS.COLOR_RED
const GUIDE_COLOR = [217,87,99]; // actor color
var _COLOR_EXIT = [172,50,50]; // exit color
const ROCK_COLOR = [182,224,241]
var MARK_COLOR = [217,160,102]
var ENTRANCE_COLOR = PS.COLOR_YELLOW
const FOLLOWER_COLOR = [223,113,38]
const CANDY_COLOR = [215,123,186]
const HUT_COLOR = PS.COLOR_WHITE
const BREAD_COLOR = [238,195,154]


var WALL_ID = 0; // wall
var FLOOR_ID = 1; // floor
var _MAP_GOLD = 2; // floor + gold
var ENTRANCE_ID = 3; // floor + actor
var EXIT_ID = 4; // floor + exit
var CANDY_ID = 5
var HUT_ID = 6

var maze1Day = {
    width : 32, height : 32, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0,
        0, 0, 0, 1, 1, 0, 1, 1, 0, 3, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0,
        0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0,
        0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0,
        0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 4, 1, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,
        0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]
};


var maze1Night = {
    width : 32, height : 32, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
        0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0,
        0, 0, 0, 1, 1, 0, 1, 1, 0, 4, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0,
        0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0,
        0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0,
        0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 3, 1, 0, 0, 0,
        0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,
        0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]
};



var maze2Day = {
    width : 32, height : 32, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0,
        0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 3, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
        0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0,
        0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,
        0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0,
        0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 4, 0, 1, 0, 1, 0,
        0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,
        0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0,
        0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

    ]
};


var maze2Night = {
    width : 32, height : 32, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0,
        0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
        0, 1, 1, 0, 0, 0, 4, 1, 5, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0,
        0, 1, 0, 1, 0, 0, 0, 1, 5, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 0, 1, 5, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 0, 1, 0, 0, 0, 5, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 0, 1, 0, 1, 1, 1, 1, 5, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,
        0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0,
        0, 0, 1, 0, 1, 1, 0, 0, 1, 5, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 3, 0, 1, 0, 1, 0,
        0, 0, 1, 1, 1, 0, 1, 0, 5, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,
        0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0,
        0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

    ]
};

var maze2NightOld = {
    width : 32, height : 32, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,
        0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0,
        0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0,
        0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0,
        0, 1, 1, 0, 0, 0, 4, 1, 5, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0,
        0, 1, 0, 1, 0, 0, 0, 1, 5, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0,
        0, 0, 1, 1, 1, 0, 1, 5, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
        0, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 0, 1, 0, 1, 1, 1, 1, 5, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0,
        0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0,
        0, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0,
        0, 0, 1, 0, 1, 1, 0, 0, 1, 5, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 3, 0, 1, 0, 1, 0,
        0, 0, 1, 1, 1, 0, 1, 5, 1, 0, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 5, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0,
        0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0,
        0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 0,
        0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,

    ]
};

// const maze1 = {
//     width : 32, height : 32, pixelSize : 1,
//     data : [
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0,
//         0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0,
//         0, 0, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0,
//         0, 0, 0, 1, 1, 0, 1, 1, 0, 3, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0,
//         0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 0, 1, 4, 0, 1, 0, 1, 1, 0, 0,
//         0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0,
//         0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0,
//         0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0,
//         0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 1, 0,
//         0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
//         0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0,
//         0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0,
//         0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 0,
//         0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0,
//         0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0,
//         0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0,
//         0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0,
//         0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
//     ]
// };

const maze1DayTest = {
    width : 23, height : 23, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 4, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]
};

const maze1NightTest = {
    width : 23, height : 23, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 4, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 3, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]
};
const maze2DayTest = {
    width : 23, height : 23, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 3, 0, 1, 1, 1, 1, 1, 4, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]
};

const maze2NightTest = {
    width : 23, height : 23, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 4, 0, 1, 1, 1, 1, 1, 3, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 5, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]
};

const maze3HutTest = {
    width : 23, height : 23, pixelSize : 1,
    data : [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 5, 3, 5, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 1, 5, 1, 0, 5, 1, 5, 5, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0,
        0, 5, 1, 5, 0, 1, 1, 1, 1, 1, 1, 5, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 1, 0, 0, 1, 5, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 5, 1, 1, 5, 0, 1, 5, 1, 0, 1, 1, 5, 1, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0,
        0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 0, 1, 1, 4, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0,
        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0,
        0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0,
        0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 7, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0,
        0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    ]
};

// var levelOrder = [
//     {type: "day", crow:true, maze: maze2Day},{type: "night", crow:true, maze: maze2Night}]

// var levelOrder = [{type: "day", crow:false, maze: maze1Day},
//     {type: "night", crow:false, maze: maze1Night},
//     {type: "day", crow:true,maze: maze2Day},
//     {type: "night", crow:true, maze: maze2Night},
//     {type: "hut", maze: maze3Hut}]

var levelOrder = [
    {type: "day", crow:false, maze: maze1Day},
    {type: "night", crow:false, maze: maze1Night},
    {type: "day", crow:true,maze: maze2Day},
    {type: "night", crow:true, maze: maze2Night},
    {type: "hut", maze: maze3HutTest}]

const SPACE_KEY = 32;

// Private constants are all upper-case, with underscore prefix

var _PLANE_FLOOR = 0; // z-plane of floor
var _PLANE_ACTOR = 3; // z-plane of actor
const GUIDE_PLANE = 5;
var MARK_PLANE = 1;
const ROCK_PLANE = 2;
const FOLLOWER_PLANE = 4;




var _SOUND_FLOOR = "fx_click"; // touch floor sound
var _SOUND_WALL = "fx_hoot"; // touch wall sound
var _SOUND_GOLD = "fx_coin1"; // take coin sound
var _SOUND_OPEN = "fx_powerup8"; // open exit sound
var _SOUND_WIN = "fx_tada"; // win sound
var _SOUND_ERROR = "fx_uhoh"; // error sound
var LOSE_SOUND = "fx_wilhelm"
const EAT_CANDY_SOUND = "fx_squish"



var _GOLD_MAX = 10; // maximum gold


var MARK_ALPHA = 100

var rockPos = [] //stores rock locations in form {x,y}


const TIMER_INTERVAL = 6

var timeSpentOnPlanning = -1;


// This timer function moves the actor
var keyDown = []

const D_KEY = 100
const S_KEY = 115
const A_KEY = 97
const W_KEY = 119
var lossReported = false
function calcTimeToWin(onLevel) {
    var timeToWin = (PS.elapsed()-timeOfLastWin)/1000
    PS.dbEvent( "winTimesV2","timeToWin",timeToWin,"onlevel",onLevel+1);
    timeOfLastWin = PS.elapsed()
}
function reportLoss(onLevel) {
    lossReported = true
    PS.dbEvent( "lossesV2", "onLevel", onLevel+1);

}
function copyMaze(maze){
    // var newMaze
    // for(var v in maze) newMaze[v] = maze[v];
    return {width: maze.width,height: maze.height,pixelSize: maze.pixelSize,data: maze.data}
}

function sendDB(){
    PS.dbSend( "winTimesV2", "aenemeth" ,{discard:true});
    if(lossReported){
        PS.dbSend( "lossesV2", "aenemeth",{discard:true} );
    }else{
        PS.dbEvent( "lossesV2", "neverLost", true);
        PS.dbSend( "lossesV2", "aenemeth",{discard:true} );
    }
    PS.dbSend( "hungerOnCandyV2", "aenemeth",{discard:true});

}

PS.shutdown = function ( options ) {
    sendDB()
};

function xyToIndex(x,y,w) {
    return (x+(y*w))
}




function setPSFunctions(level) {
    PS.touch = level.touch;
    PS.keyDown = level.keyDown;
    PS.keyUp = level.keyUp;
}





// The G event handlers take the same parameters as Perlenspiel's event handlers,
// so they can be assigned to those handlers directly.
// Note the LACK of parentheses after G.init and G.move!
// We want to assign the functions themselves, NOT the values returned by calling them!
PS.init = function (){
    PS.border(PS.ALL,PS.ALL,0)
    var gotname = function ( id, name ) {

        // Game startup code goes here
        loadLevel(0)

    };

    // Establish database with login prompt
    PS.dbInit( "winTimesV2", { login : gotname } );
    PS.dbInit( "lossesV2" );
    PS.dbInit( "hungerOnCandyV2" );

    //PS.imageLoad( "map1.png", onLoad, 1);
    // PS.imageLoad( "map2.png", onLoad, 1);
    // PS.imageLoad( "map2-candy.png", onLoad, 1);


    //dayLevel.init(maze1Copy);
}

function loadLevel(num){
    if(num>=levelOrder.length){
        return
    }

    var level = levelOrder[num]
    if(level.type == "day"){
        setPSFunctions(dayLevel)
        dayLevel.init(level.maze, level.crow, num);
    }else if(level.type == "night"){
        setPSFunctions(nightLevel)
        nightLevel.init(level.maze, level.crow, num);

    }else if(level.type == "hut"){
        setPSFunctions(hutLevel)
        hutLevel.init(level.maze, level.crow, num);
    }
}

function onLoad(img){
    PS.imageDump(img)
}

const WITCH_PLANE = 10
const WITCH_COLOR = PS.COLOR_GREEN
const WITCH_ID = 7
var hutLevel = ( function () {

    function onWin(){
        PS.timerStop( _id_timer ); // stop movement timer
        _won = true;
        calcTimeToWin(onLevel)
        PS.audioPlay("fx_tada")
        PS.statusText("You saved Hansel!")
        sendDB()
        loadLevel(levelNum+1)
    }

    var followerID ;
    var follower = {x: 0, y: 0}
    var witchStage
    var STARTING_ROCKS = 3
    var rockCount = STARTING_ROCKS;

    var _id_sprite; // actor sprite id
    var _id_path; // pathmap id for pathfinder
    var _id_timer; // timer id

    var _gold_count = 0; // initial number of gold pieces in map
    var _gold_found = 0; // gold pieces collected
    var _won = false; // true on win

    var _exit_ready = false; // true when exit is opened

    var _path; // path to follow, null if none
    var witchPath; // path to follow, null if none
    var _step; // current step on path
    var witchStep; // current step on path

    var _actor_x; // initial x-pos of actor sprite
    var _actor_y; // initial y-pos of actor sprite
    "use strict";
    var witch =  {x: null, y: null, sprite: null, path: null, step: null}
    var _exit_x; // x-pos of exit
    var _exit_y; // y-pos of exit


    function determinePath() {
        var line;

        // Do nothing if game over

        if ( _won ) {
            return;
        }

        // Use pathfinder to calculate a line from current actor position
        // to touched position
        if(keyDown[D_KEY]){//d
            line = PS.pathFind( _id_path, _actor_x, _actor_y, _actor_x+1, _actor_y );
        }else if(keyDown[S_KEY]){//s
            line = PS.pathFind( _id_path, _actor_x, _actor_y, _actor_x, _actor_y+1 );
        }else if(keyDown[W_KEY]){//s
            line = PS.pathFind( _id_path, _actor_x, _actor_y, _actor_x, _actor_y-1 );
        }else if(keyDown[A_KEY]){//s
            line = PS.pathFind( _id_path, _actor_x, _actor_y, _actor_x-1, _actor_y );
        }else{
            line = []
        }

        // If line is not empty, it's valid,
        // so make it the new path
        // Otherwise hoot at the player

        if ( line.length > 0 ) {
            _path = line;
            _step = 0; // start at beginning

        }

    }
    var playerHasMoved = false;
    var candyEaten
    function movePlayerEvalVictory() {
        var p, nx, ny, ptr, val;

        if ( !_path || lost) { // path invalid (null)?
            return; // just exit
        }

        // Get next point on path

        p = _path[ _step ];
        nx = p[ 0 ]; // next x-pos
        ny = p[ 1 ]; // next y-pos

        // If actor already at next pos,
        // path is exhausted, so nuke it

        if ( ( _actor_x === nx ) && ( _actor_y === ny ) ) {
            _path = null;
            return;
        }

        if(!playerHasMoved){
            playerHasMoved = true

        }


        if(witchStage == 0){//MOVE FOLLOWER
            PS.spriteMove( followerID,_actor_x, _actor_y);
        }

        // Move sprite to next position
        PS.audioPlay( _SOUND_FLOOR );
        PS.spriteMove( _id_sprite, nx, ny );
        _actor_x = nx; // update actor's xpos
        _actor_y = ny; // and ypos



        // If actor has reached a gold piece, take it

        ptr = ( _actor_y * maze.height ) + _actor_x; // pointer to map data under actor
        val = maze.data[ ptr ]; // get map data

        //eat candy
        if(maze.data[xyToIndex(_actor_x,_actor_y,maze.width)] == CANDY_ID && !candyEaten[xyToIndex(_actor_x,_actor_y,maze.width)]){
            eatCandy(_actor_x,_actor_y)
        }

        // If exit is ready and actor has reached it, end game

        if ( _exit_ready && ( _actor_x === _exit_x ) && ( _actor_y === _exit_y ) ) {

            onWin()
            return;
        }



        _step += 1; // point to next step

        // If no more steps, nuke path

        if ( _step >= _path.length ) {
            _path = null;
        }

        PS.timerStop(moveTimer)
        moveTimer = PS.timerStart(speed,movePlayerEvalVictory)
    }

    var speed = TIMER_INTERVAL

    function eatCandy(x,y) {
        PS.color(x,y,FLOOR_COLOR)
        candyEaten[xyToIndex(x,y,maze.width)] = true
        PS.audioPlay(EAT_CANDY_SOUND)


        if(witchStage == 0){
            speed+=CANDY_SLOW
        }

    }

    var _tick = function () {
        determinePath()
        //movePlayerEvalVictory()

    }


    function initMapAndPlayer() {

        var x, y, val;
        // Establish grid size
        // This should always be done FIRST, before any other initialization!

        PS.gridSize( maze.width, maze.height );
        PS.gridColor( GRID_DAY_COLOR ); // grid background color
        PS.border( PS.ALL, PS.ALL, 0 ); // no bead borders

        // Locate positions of actor and exit, count gold pieces, draw map

        _gold_count = 0;
        _actor_x = _exit_x = -1; // mark as not found
        for (y = 0; y < maze.height; y += 1 ) {
            for (x = 0; x < maze.width; x += 1 ) {
                val = maze.data[ ( y * maze.height ) + x ]; // get map data
                if ( val === WALL_ID ) {
                    PS.color( x, y, _COLOR_WALL );
                }
                else if ( val === FLOOR_ID ) {
                    PS.color( x, y, FLOOR_COLOR );
                }else if ( val === CANDY_ID ) {
                    PS.color( x, y, CANDY_COLOR );
                }

                else if ( val === ENTRANCE_ID ) {
                    if ( _actor_x >= 0 ) {
                        PS.debug( "WARNING: More than one actor!\n" );
                        PS.audioPlay( _SOUND_ERROR );
                        return;
                    }
                    _actor_x = x;
                    _actor_y = y;
                    //maze.data[ ( y * maze.height ) + x ] = FLOOR_ID; // change actor to floor
                    PS.color( x, y, ENTRANCE_COLOR );
                }
                else if ( val === EXIT_ID ) {
                    if ( _exit_x >= 0 ) {
                        PS.debug( "WARNING: More than one exit!\n" );
                        PS.audioPlay( _SOUND_ERROR );
                        return;
                    }
                    _exit_x = x;
                    _exit_y = y;
                    PS.color(x,y,FLOOR_COLOR)
                    //maze.data[ ( y * maze.height ) + x ] = FLOOR_ID; // change exit to floor

                }else if (val == WITCH_ID){
                    witch.x = x
                    witch.y = y
                    PS.color( x, y, FLOOR_COLOR );

                }
            }
        }


        // Create 1x1 solid sprite for actor
        // Place on actor plane in initial actor position

        _id_sprite = PS.spriteSolid( 1, 1 );
        PS.spriteSolidColor( _id_sprite, _COLOR_ACTOR );
        PS.spritePlane( _id_sprite, _PLANE_ACTOR );
        PS.spriteMove( _id_sprite, _actor_x, _actor_y );

        followerID =  PS.spriteSolid( 1, 1 );
        PS.spriteSolidColor( followerID, FOLLOWER_COLOR );
        PS.spritePlane( followerID, FOLLOWER_PLANE );

        PS.spriteMove( followerID, _actor_x, _actor_y -1);


        // Create pathmap from our imageMap
        // for use by pathfinder

        _id_path = PS.pathMap( maze );

        // Start the timer function that moves the actor
        // Run at 10 frames/sec (every 6 ticks)

        _path = null; // start with no path
        _step = 0;
        _id_timer = PS.timerStart( TIMER_INTERVAL, _tick );



    }




    // Public functions are exposed in the global G object, which is returned here.
    // Only two functions need to be exposed; everything else is encapsulated!
    // So safe. So elegant.

    var maze
    var levelNum
    var hasCrows
    var DROP_COLOR
    var moveTimer



    //==================== WITCH FUNCTIONS
    var witch =  {x: null, y: null, sprite: null, path: null, step: null}
    var witchTimer
    var witchTickSpeed
    var WITCH_FAST_SPEED = 11
    const WITCH_SLOW_SPEED = 20

    function witchTick() {
        moveWitch()

    }
    function moveWitch(){
        var p, nx, ny, ptr, val;


        if ( !witch.path ) { // path invalid (null)?
            return; // just exit
        }

        // Get next point on path

        p = witch.path[ witch.step ];
        nx = p[ 0 ]; // next x-pos
        ny = p[ 1 ]; // next y-pos

        // If actor already at next pos,
        // path is exhausted, so nuke it

        if ( ( witch.x === nx ) && ( witch.y === ny ) ) {
            _path = null;
            return;
        }

        if(witchStage == 1){//MOVE FOLLOWER
            PS.spriteMove( followerID,witch.x, witch.y);
        }

        // Move sprite to next position
        PS.spriteMove( witch.sprite, nx, ny );
        witch.x = nx; // update actor's xpos
        witch.y = ny; // and ypos

        witch.step += 1; // point to next step

        // If no more steps, nuke path

        if ( witch.step >= witch.path.length ) {
            witch.path = null;
        }

        evalWitchLocation()


        updateWitchPath()
    }
    function evalWitchLocation() {
        //if the witch is on the player, steal follower
        if(witch.x == _actor_x && witch.y == _actor_y && witchStage == 0){
            stealFollower();
        }
        if(witch.x == _exit_x && witch.y == _exit_y && witchStage == 1){
            putInOven()
        }
        if(witch.x == _actor_x && witch.y == _actor_y && witchStage == 2){
            if(!_won){
                loseGame();
            }else{
                burnWitch()
            }
        }

    }

    function burnWitch() {
        PS.audioPlay("fx_swoosh")
        PS.spriteDelete(witch.sprite)
        PS.statusText("And the witch burned!")
    }
    var lost
    var loseTextTimer
    function loseGame() {
        lost = true
        PS.statusText("\"Neheheheh, I feast tonight!\"")
        PS.audioPlay("fx_wilhelm")
        loseTextTimer = PS.timerStart(160,loseGameTextChange)
        reportLoss(onLevel)

    }

    function loseGameTextChange() {
        PS.statusText("Tap to retry")
    }

    function putInOven() {
        PS.statusText("Save Hansel without getting caught!")
        PS.spriteShow(followerID,false)
        witchStage = 2
    }

    function stealFollower() {

        witchStage = 1;
        speed = HUT_START_SPEED
        showOven()
        PS.timerStop(witchTimer)
        witchTimer = PS.timerStart(WITCH_FAST_SPEED,witchTick)
        PS.statusText("\"Come Hansel, to the oven!\"")

    }

    function showOven() {
        _exit_ready = true;
        PS.color( _exit_x, _exit_y, _COLOR_EXIT );
    }

    function initWitch() {
        PS.statusText("\"Welcome children, eat some candy!\"")
        witchTickSpeed = WITCH_SLOW_SPEED
        witch.sprite = PS.spriteSolid( 1, 1 );

        PS.spriteSolidColor( witch.sprite, WITCH_COLOR );
        PS.spritePlane( witch.sprite, WITCH_PLANE );
        PS.spriteMove( witch.sprite, _actor_x, _actor_y );

        witchTimer = PS.timerStart(witchTickSpeed,witchTick)

        updateWitchPath()

    }
    function updateWitchPath() {
        if(witchStage == 0){
            witch.path = PS.pathFind( _id_path, witch.x, witch.y, _actor_x,_actor_y);
            witch.step = 0;
            if ( witch.step >= witch.path.length ) {
                witch.path = null;
            }
        }else if(witchStage == 1){
            witch.path = PS.pathFind( _id_path, witch.x, witch.y, _exit_x,_exit_y);
            witch.step = 0;
            if ( witch.step >= witch.path.length ) {
                witch.path = null;
            }
        }
        else if(witchStage == 2){
            witch.path = PS.pathFind( _id_path, witch.x, witch.y, _actor_x,_actor_y);
            witch.step = 0;
            if ( witch.step >= witch.path.length ) {
                witch.path = null;
            }
        }

    }

    function restartLevel() {

        PS.timerStop(witchTimer)
        PS.timerStop(moveTimer)
        PS.timerStop(loseTextTimer)
        loadLevel(onLevel)


    }

    var onLevel

    return {
        // Initialize the game
        // Called once at startup

        init : function (withmaze, doesHaveCrows, onlevel) {
            witchStage = 0;
            onLevel = onlevel
            lost = false
            _exit_ready = false;

            speed = HUT_START_SPEED
            hasCrows = doesHaveCrows
            candyEaten = []
            playerHasMoved = false

            if(hasCrows){
                DROP_COLOR = BREAD_COLOR
            }else{
                DROP_COLOR = ROCK_COLOR
            }
            levelNum = onlevel
            maze = withmaze
            _won = false
            rockPos = []
            rockCount = STARTING_ROCKS
            moveTimer = PS.timerStart(speed,movePlayerEvalVictory)
            witchStage = false
            initMapAndPlayer()
            initWitch()
        },

        keyDown : function (key, shift, ctrl, options ) {
            keyDown[key] = true
            determinePath()

        },

        keyUp : function (key, shift, ctrl, options ){
            keyDown[key] = false
        },


        touch : function (x,y ){
            if(lost){
                restartLevel()
            }
        }

    };
} () ); // end of IIFE


var dayLevel = ( function () {

    function onWin(){
        PS.timerStop( _id_timer ); // stop movement timer
        _won = true;
        timeSpentOnPlanning = PS.elapsed()/1000

        loadLevel(levelNum+1)
    }

    var followerID ;

    var STARTING_ROCKS = 15
    var rockCount = STARTING_ROCKS;

    var _id_sprite; // actor sprite id
    var _id_path; // pathmap id for pathfinder
    var _id_timer; // timer id

    var _gold_count = 0; // initial number of gold pieces in map
    var _gold_found = 0; // gold pieces collected
    var _won = false; // true on win

// These two variables control the initial location of the actor



// These two variables control the location of the exit



    var _exit_ready = false; // true when exit is opened

// Timer function, called every 1/10th sec
// This moves the actor along paths

    var _path; // path to follow, null if none
    var guidePath; // path to follow, null if none
    var _step; // current step on path
    var guideStep; // current step on path

    var _actor_x; // initial x-pos of actor sprite
    var _actor_y; // initial y-pos of actor sprite
    "use strict";
    var guide =  {x: null, y: null, sprite: null, path: null, step: null}
    var _exit_x; // x-pos of exit
    var _exit_y; // y-pos of exit


    function determinePath() {
        var line;

        // Do nothing if game over

        if ( _won ) {
            return;
        }


        // Use pathfinder to calculate a line from current actor position
        // to touched position
        //TODO: handle OOB
        if(keyDown[D_KEY]){//d
            if( isOOB(_actor_x+1,_actor_y)){
                return
            }
            line = PS.pathFind( _id_path, _actor_x, _actor_y, _actor_x+1, _actor_y );
        }else if(keyDown[S_KEY]){//s
            if( isOOB(_actor_x,_actor_y+1)){
                return
            }
            line = PS.pathFind( _id_path, _actor_x, _actor_y, _actor_x, _actor_y+1 );
        }else if(keyDown[W_KEY]){//s
            if( isOOB(_actor_x,_actor_y-1)){
                return
            }
            line = PS.pathFind( _id_path, _actor_x, _actor_y, _actor_x, _actor_y-1 );
        }else if(keyDown[A_KEY]){//s
            if( isOOB(_actor_x-1,_actor_y)){
                return
            }
            line = PS.pathFind( _id_path, _actor_x, _actor_y, _actor_x-1, _actor_y );
        }else{
            line = []
        }

        // If line is not empty, it's valid,
        // so make it the new path
        // Otherwise hoot at the player

        if ( line.length > 0 ) {
            _path = line;
            _step = 0; // start at beginning

        }

    }
    function isOOB(x,y) {
        return (x<0 || x>=maze.width || y<0 || y>=maze.height)
    }
    var playerHasMoved = false;
    function movePlayerEvalVictory() {
        var p, nx, ny, ptr, val;

        if ( !_path ) { // path invalid (null)?
            return; // just exit
        }

        // Get next point on path

        p = _path[ _step ];
        nx = p[ 0 ]; // next x-pos
        ny = p[ 1 ]; // next y-pos

        // If actor already at next pos,
        // path is exhausted, so nuke it

        if ( ( _actor_x === nx ) && ( _actor_y === ny ) ) {
            _path = null;
            return;
        }

        if(!playerHasMoved){
            setText("Place/Pickup stones with space")
            playerHasMoved = true

        }


        //MOVE FOLLOWER
        PS.spriteMove( followerID,_actor_x, _actor_y);



        // Move sprite to next position
        PS.audioPlay( _SOUND_FLOOR );
        PS.spriteMove( _id_sprite, nx, ny );
        _actor_x = nx; // update actor's xpos
        _actor_y = ny; // and ypos



        // If actor has reached a gold piece, take it

        ptr = ( _actor_y * maze.height ) + _actor_x; // pointer to map data under actor
        val = maze.data[ ptr ]; // get map data


        // If exit is ready and actor has reached it, end game

        if ( _exit_ready && ( _actor_x === _exit_x ) && ( _actor_y === _exit_y ) ) {

            onWin()
            return;
        }

        _step += 1; // point to next step

        // If no more steps, nuke path

        if ( _step >= _path.length ) {
            _path = null;
        }
    }


    function markPath(x,y) {
        let newMark = PS.spriteSolid(1,1)
        PS.spriteSolidColor(newMark,MARK_COLOR)
        PS.spritePlane(newMark, MARK_PLANE)
        PS.spriteSolidAlpha(newMark,MARK_ALPHA)
        PS.spriteMove(newMark,x,y)
    }

    function moveGuide(){
        var p, nx, ny, ptr, val;


        if ( !guide.path ) { // path invalid (null)?
            return; // just exit
        }

        // Get next point on path

        p = guide.path[ guide.step ];
        nx = p[ 0 ]; // next x-pos
        ny = p[ 1 ]; // next y-pos

        // If actor already at next pos,
        // path is exhausted, so nuke it

        if ( ( guide.x === nx ) && ( guide.y === ny ) ) {
            _path = null;
            return;
        }
        //mark old location
        markPath(guide.x,guide.y)

        // Move sprite to next position
        PS.spriteMove( guide.sprite, nx, ny );
        guide.x = nx; // update actor's xpos
        guide.y = ny; // and ypos

        guide.step += 1; // point to next step

        // If no more steps, nuke path

        if ( guide.step >= guide.path.length ) {
            guide.path = null;
        }
    }

    var _tick = function () {

        determinePath()
        moveGuide();
        movePlayerEvalVictory()
    }

    function setText(text) {
        if(!hasCrows){
            PS.statusText(text)
        }else{
            PS.statusText("You only have breadcrumbs now...")
        }
    }

    function initMapAndPlayer() {

        var x, y, val;
        // Establish grid size
        // This should always be done FIRST, before any other initialization!

        PS.gridSize( maze.width, maze.height );
        PS.gridColor( GRID_DAY_COLOR ); // grid background color
        PS.border( PS.ALL, PS.ALL, 0 ); // no bead borders

        // Locate positions of actor and exit, count gold pieces, draw map

        _gold_count = 0;
        _actor_x = _exit_x = -1; // mark as not found
        for (y = 0; y < maze.height; y += 1 ) {
            for (x = 0; x < maze.width; x += 1 ) {
                val = maze.data[ ( y * maze.height ) + x ]; // get map data
                if ( val === WALL_ID ) {
                    PS.color( x, y, _COLOR_WALL );
                }
                else if ( val === FLOOR_ID ) {
                    PS.color( x, y, FLOOR_COLOR );
                }

                else if ( val === ENTRANCE_ID ) {
                    if ( _actor_x >= 0 ) {
                        PS.debug( "WARNING: More than one actor!\n" );
                        PS.audioPlay( _SOUND_ERROR );
                        return;
                    }
                    _actor_x = x;
                    _actor_y = y;
                    //maze.data[ ( y * maze.height ) + x ] = FLOOR_ID; // change actor to floor
                    PS.color( x, y, ENTRANCE_COLOR );
                }
                else if ( val === EXIT_ID ) {
                    if ( _exit_x >= 0 ) {
                        PS.debug( "WARNING: More than one exit!\n" );
                        PS.audioPlay( _SOUND_ERROR );
                        return;
                    }
                    _exit_x = x;
                    _exit_y = y;
                    //maze.data[ ( y * maze.height ) + x ] = FLOOR_ID; // change exit to floor
                    PS.color( x, y, _COLOR_EXIT );
                }
            }
        }


        // Create 1x1 solid sprite for actor
        // Place on actor plane in initial actor position

        _id_sprite = PS.spriteSolid( 1, 1 );
        PS.spriteSolidColor( _id_sprite, _COLOR_ACTOR );
        PS.spritePlane( _id_sprite, _PLANE_ACTOR );
        PS.spriteMove( _id_sprite, _actor_x, _actor_y );

        followerID =  PS.spriteSolid( 1, 1 );
        PS.spriteSolidColor( followerID, FOLLOWER_COLOR );
        PS.spritePlane( followerID, FOLLOWER_PLANE );

        PS.spriteMove( followerID, _actor_x, _actor_y -1);


        // Create pathmap from our imageMap
        // for use by pathfinder

        _id_path = PS.pathMap( maze );

        // Start the timer function that moves the actor
        // Run at 10 frames/sec (every 6 ticks)

        _path = null; // start with no path
        _step = 0;
        _id_timer = PS.timerStart( TIMER_INTERVAL, _tick );


        _exit_ready = true;
        PS.color( _exit_x, _exit_y, _COLOR_EXIT ); // show the exit
        PS.glyphColor( _exit_x, _exit_y, PS.COLOR_WHITE ); // mark with white X
        PS.glyph( _exit_x, _exit_y, "X" );
        //PS.audioPlay( _SOUND_OPEN );
    }

    function initGuide() {
        guide.sprite = PS.spriteSolid( 1, 1 );

        PS.spriteSolidColor( guide.sprite, GUIDE_COLOR );
        PS.spritePlane( guide.sprite, GUIDE_PLANE );
        PS.spriteMove( guide.sprite, _actor_x, _actor_y );

        guide.x = _actor_x
        guide.y = _actor_y

        guide.path = PS.pathFind( _id_path, _actor_x, _actor_y, _exit_x,_exit_y );
        guide.step = 0;
    }

    function dropRock(x,y) {
        let rockSprite = PS.spriteSolid(1,1)
        PS.spriteSolidColor(rockSprite,DROP_COLOR)
        PS.spritePlane(rockSprite, ROCK_PLANE)
        PS.spriteMove(rockSprite,x,y)
        rockPos[x+(y*maze.width)] = rockSprite
    }
    function pickUpRock(x,y) {
        PS.spriteDelete(rockPos[xyToIndex(x,y,maze.width)])
        rockPos[xyToIndex(x,y,maze.width)] = null
        rockCount+=1

        if(lowOnRocks){
            if(!hasCrows){
                PS.statusText("\"We have "+rockCount+" pebbles left...\"")
            }else{
                PS.statusText("\"We have "+rockCount+" breadcrumbs left...\"")
            }
        }else{
            setText("Mark a path home")
        }
    }

    var lowOnRocks

    function dropRockCommand(x,y) {
        if(rockPos[xyToIndex(x,y,maze.width)]){
            pickUpRock(x,y)

        }else if(rockCount>0){
            dropRock(x,y)
            rockCount-=1
            if(rockCount<5){
                if(!lowOnRocks) lowOnRocks = true;
            }

            if(lowOnRocks){
                if(!hasCrows){
                    PS.statusText("\"We have "+rockCount+" rocks left...\"")
                }else{
                    PS.statusText("\"We have "+rockCount+" breadcrumbs left...\"")
                }
            }else{
                setText("Mark a path home")
            }

        }
    }

    // Public functions are exposed in the global G object, which is returned here.
    // Only two functions need to be exposed; everything else is encapsulated!
    // So safe. So elegant.

    var maze
    var levelNum
    var hasCrows
    var DROP_COLOR
    return {
        // Initialize the game
        // Called once at startup

        init : function (withmaze, doesHaveCrows, onlevel) {
            hasCrows = doesHaveCrows
            lowOnRocks = false
            playerHasMoved = false
            setText("Follow father with WASD")

            if(hasCrows){
                DROP_COLOR = BREAD_COLOR
            }else{
                DROP_COLOR = ROCK_COLOR
            }
            levelNum = onlevel
            maze = withmaze
            _won = false
            rockPos = []
            rockCount = STARTING_ROCKS
            initMapAndPlayer()
            initGuide();
        },

        keyDown : function (key, shift, ctrl, options ) {
            keyDown[key] = true
            determinePath()
            if(key == SPACE_KEY){
                dropRockCommand(_actor_x,_actor_y)
            }
        },

        keyUp : function (key, shift, ctrl, options ){
            keyDown[key] = false
        }




    };
} () ); // end of IIFE


var nightLevel =(function (){
    var eatenCandy = []
    var onLevel
    var lost = false
    var MAZE_TIMER_START = 3000
    // var MAZE_TIMER_START = 2000
    var mazeTimer = MAZE_TIMER_START
    var maze
    var _actor_x; // initial x-pos of actor sprite
    var _actor_y; // initial y-pos of actor sprite
    var _exit_x; // x-pos of exit
    var _exit_y; // y-pos of exit
    var followerDelta; //x,y
    var DROP_COLOR
    var dropSprites = []
    var actorSprite
    var followerSprite
    var hasSeenBread = false
    var firstCandy
    function renderMap() {
        PS.spriteShow(actorSprite,true)
        PS.spriteShow(followerSprite,true)
        dropSprites.forEach((sprite)=>{
            PS.spriteShow(sprite, false)
        })
        let onDropSprite = 0;

        for(let i = 0; i < NIGHT_GRID_SIZE; i+=1){
            for(let j = 0; j < NIGHT_GRID_SIZE; j+=1) {
                var mapX = _actor_x-Math.floor(NIGHT_GRID_SIZE/2)+i
                var mapY = _actor_y-Math.floor(NIGHT_GRID_SIZE/2)+j
                if(mapX<0 || mapY<0 || mapX>maze.width || mapY>maze.height){
                    PS.color(i,j,OOB_COLOR)

                }else{
                    let val = maze.data[mapX+(mapY*maze.width)]

                    if ( val === WALL_ID ) {
                        PS.color( i, j, _COLOR_WALL );
                    }
                    else if ( val === FLOOR_ID ) {
                        PS.color( i, j, FLOOR_COLOR );
                    }
                    else if ( val === ENTRANCE_ID ) {//IF EXIT, HANDLE LIKE ENTRANCE

                        PS.color( i, j, ENTRANCE_COLOR );
                    }
                    else if ( val ===  EXIT_ID) {

                        _exit_x = i;
                        _exit_y = j;
                        //maze.data[ ( y * maze.height ) + x ] = FLOOR_ID; // change exit to floor
                        PS.color( i, j, _COLOR_EXIT );
                    } else if ( val ===  CANDY_ID) {
                        if(!eatenCandy[xyToIndex(mapX,mapY,maze.width)]) {
                            PS.color(i, j, CANDY_COLOR);

                        }else{
                            PS.color( i, j, FLOOR_COLOR );
                        }


                    } else if ( val ===  HUT_ID) {
                        PS.color( i, j, HUT_COLOR );
                    }
                    //Then, place rock sprite, make visible and give alpha
                    if(rockPos[mapX+(mapY*maze.width)]){

                        var drop = dropSprites[onDropSprite]
                        PS.spriteMove(drop,i,j)
                        PS.spriteShow(drop,true)
                        if(hasCrows){
                            PS.spriteSolidAlpha(drop,breadDecay)
                            if(!hasSeenBread){
                                hasSeenBread = true
                                PS.statusText("The breadcrumbs are being eaten!")
                            }
                        }else{
                            PS.spriteSolidAlpha(drop,255)

                        }
                        onDropSprite++
                    }

                }
            }
        }
        //coler ovverides
        // PS.color(Math.floor(NIGHT_GRID_SIZE/2),Math.floor(NIGHT_GRID_SIZE/2),_COLOR_ACTOR)
        //
        //     PS.color(Math.floor(NIGHT_GRID_SIZE/2)+followerDelta.x,Math.floor(NIGHT_GRID_SIZE/2)+followerDelta.y,FOLLOWER_COLOR)

        PS.spriteMove(actorSprite,Math.floor(NIGHT_GRID_SIZE/2),Math.floor(NIGHT_GRID_SIZE/2))
        PS.spriteMove(followerSprite,Math.floor(NIGHT_GRID_SIZE/2)+followerDelta.x,Math.floor(NIGHT_GRID_SIZE/2)+followerDelta.y)


    }

    function renderTimer() {

        var percentTimer = mazeTimer/MAZE_TIMER_START
        var numberOfBeads = Math.ceil(NIGHT_GRID_SIZE*percentTimer)

        for(let x = 0; x < NIGHT_GRID_SIZE; x+=1) {
            if(x<numberOfBeads){
                PS.alpha(x,NIGHT_GRID_SIZE+1,255)
                PS.color(x,NIGHT_GRID_SIZE+1,TIMER_COLOR)
            }else{
                PS.alpha(x,NIGHT_GRID_SIZE+1,0)
            }
        }
    }

    function renderView() {
        renderMap()
        renderTimer()

    }

    var timerID
    function tick() {
        decayBread()
        mazeTimer -= TIMER_INTERVAL
        //determine move direction from key (move nowhere if 2 keys held)
        //TODO: handle when player holds multiples keys down
        let newPos = null
        let potentialFollowerDelta
        if(keyDown[D_KEY]){//d
            newPos =  {x: _actor_x+1, y: _actor_y };
            potentialFollowerDelta = {x:-1,y:0}
        }else if(keyDown[S_KEY]){//s
            newPos =  {x: _actor_x, y: _actor_y+1 };
            potentialFollowerDelta = {x:0,y:-1}
        }else if(keyDown[W_KEY]){
            newPos =  {x: _actor_x, y: _actor_y-1 };
            potentialFollowerDelta = {x:0,y:1}
        }else if(keyDown[A_KEY]){//s
            newPos =  {x: _actor_x-1, y: _actor_y };
            potentialFollowerDelta = {x:1,y:0}
        }

        if(newPos!=null && newPos.x >= 0 && newPos.y >=0 && newPos.x < maze.width && newPos.y< maze.height){
            //if !wall, move there
            if(maze.data[newPos.x+(newPos.y*maze.width)] != WALL_ID){
                _actor_x = newPos.x
                _actor_y = newPos.y

                followerDelta = potentialFollowerDelta
            }
        }
        //rendeView
        renderView()

        console.log(maze.data[xyToIndex(_actor_x,_actor_y,maze.width)])
        //if on exit, end game
        if(maze.data[xyToIndex(_actor_x,_actor_y,maze.width)]== EXIT_ID){
            onWin()
        }else if(maze.data[xyToIndex(_actor_x,_actor_y,maze.width)]== CANDY_ID && !eatenCandy[xyToIndex(_actor_x,_actor_y,maze.width)]){//eat candy
            eatCandy(_actor_x,_actor_y)
        }else if(mazeTimer<0){
            onLose()
        }
    }
    function decayBread() {
        breadDecay -= BREAD_DECAY_RATE
        if(breadDecay<0) breadDecay = 0;
    }

    function eatCandy(x,y) {
        if(firstCandy){
            PS.dbEvent( "hungerOnCandyV2","hunger%",mazeTimer/MAZE_TIMER_START);
            firstCandy = false
        }
        PS.statusText("mmmmmm, candy!")
        eatenCandy[xyToIndex(_actor_x,_actor_y,maze.width)] = true
        mazeTimer += CANDY_REFILL
        if(mazeTimer>MAZE_TIMER_START){
            mazeTimer = MAZE_TIMER_START
        }
        PS.audioPlay(EAT_CANDY_SOUND)

    }

    var textChangeTimer

    function changeLoseText() {
        PS.statusText("Touch to retry")
        PS.timerStop(textChangeTimer)
    }

    function onLose() {
        textChangeTimer = PS.timerStart(LOSE_TEXT_CHANGE_TIME,changeLoseText)
        PS.audioPlay(LOSE_SOUND)
        PS.timerStop(timerID)
        PS.statusText("You starved in the woods...")
        let x = Math.floor(NIGHT_GRID_SIZE/2)
        let y = Math.floor(NIGHT_GRID_SIZE/2)
        if(rockPos[x+(y*maze.width)]){
            PS.color(x,y,DROP_COLOR)
        }else{
            PS.color(x,y,FLOOR_COLOR)
        }

        let fx = Math.floor(NIGHT_GRID_SIZE/2)+followerDelta.x
        let fy = Math.floor(NIGHT_GRID_SIZE/2)+followerDelta.y
        if(rockPos[fx+(fy*maze.width)]){
            PS.color(fx,fy,DROP_COLOR)
        }else{
            PS.color(fx,fy,FLOOR_COLOR)
        }

        PS.spriteShow(followerSprite,false)
        PS.spriteShow(actorSprite,false)
        reportLoss(onLevel)
        //PS.dbSend( "winRecordsV1","aenemeth",{discard:true});
        lost = true
    }
    function onWin() {
        //PS.audioPlay(_SOUND_WIN)
        PS.timerStop(timerID)
        PS.statusText("You made it out!")
        calcTimeToWin(onLevel)
        loadLevel(onLevel+1)

    }

    function toHut() {
        PS.audioPlay(_SOUND_WIN)
        PS.timerStop(timerID)
    }

    function initMapAndPlayer(){
        timerID = PS.timerStart( TIMER_INTERVAL, tick );


        //rotate maze

        //switch exit and entrance
        let entrancePos = {}
        let exitPos = {}
        for (let y = 0; y < maze.height; y += 1 ) {
            for (let x = 0; x < maze.width; x += 1 ) {
                if(maze.data[ ( y * maze.width ) + x ] == 4){//exit
                    exitPos = {x:x,y:y}
                }
                if(maze.data[ ( y * maze.width ) + x ] == 3){//entrance
                    entrancePos = {x:x,y:y}
                }
            }
        }
        // maze.data[ ( entrancePos.y * maze.height ) + entrancePos.x ] = 4
        // maze.data[ ( exitPos.y * maze.height ) + exitPos.x ] = 3


        //place player at entrance
        _actor_x = entrancePos.x
        _actor_y = entrancePos.y
        //init grid size
        PS.gridSize(NIGHT_GRID_SIZE, NIGHT_GRID_SIZE+2)
        PS.border(PS.ALL,PS.ALL,0)
        PS.gridColor(GRID_NIGHT_COLOR)

        for(let x = 0; x<NIGHT_GRID_SIZE;x+=1){
            PS.alpha(x,NIGHT_GRID_SIZE,0)
        }
        //render the small night view
        renderView()
    }

    function restartLevel() {
        loadLevel(onLevel-1)
    }

    function makeDropSprites() {
        // if(dropSprites.length==0){
        //     for(var i = 0; i < 9; i++){
        //         dropSprites.push(makeOneDropSprite())
        //     }
        // }
        dropSprites = []
        for(var i = 0; i < 9; i++){
            dropSprites.push(makeOneDropSprite())
        }

    }
    function makeOneDropSprite() {
        let rockSprite = PS.spriteSolid(1,1)
        console.log(DROP_COLOR,hasCrows)
        PS.spriteSolidColor(rockSprite,DROP_COLOR)
        PS.spritePlane(rockSprite, ROCK_PLANE)
        PS.spriteShow(rockSprite,false)

        return rockSprite
    }

    var hasCrows;
    var breadDecay = 255;
    return {
        // Initialize the game
        // Called once at startup

        init : function (withmaze, doesHaveCrows, thisLevelNum) {
            hasSeenBread = false
            eatenCandy = []
            firstCandy = true
            //if(!actorSprite){
            actorSprite =  PS.spriteSolid( 1, 1 );
            PS.spriteSolidColor( actorSprite, _COLOR_ACTOR );
            PS.spritePlane( actorSprite, _PLANE_ACTOR );
            //}
            //if(!followerSprite){
            followerSprite =  PS.spriteSolid( 1, 1 );
            PS.spriteSolidColor( followerSprite, FOLLOWER_COLOR );
            PS.spritePlane( followerSprite, FOLLOWER_PLANE );
            //}

            PS.spriteShow(followerSprite,true)
            PS.spriteShow(actorSprite,true)

            breadDecay = 255;
            hasCrows = doesHaveCrows
            console.log(hasCrows)

            if(hasCrows){
                DROP_COLOR = BREAD_COLOR
            }else{
                DROP_COLOR = ROCK_COLOR
            }

            makeDropSprites()

            onLevel = thisLevelNum
            followerDelta = {x:1,y:0}
            lost = false
            maze = withmaze
            mazeTimer = MAZE_TIMER_START
            PS.statusColor([255,255,255])

            PS.statusText("Find your way back out!")
            initMapAndPlayer()
        },

        keyDown : function (key, shift, ctrl, options ) {
            keyDown[key] = true
            // determinePath()

        },

        keyUp : function (key, shift, ctrl, options ){
            keyDown[key] = false
        },

        touch : function (x,y ){
            if(lost){
                restartLevel()
            }
        }



    };
} () ); // end of IIFE

